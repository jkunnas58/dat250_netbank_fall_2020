C:\Stig\PyCharm\SQLmapproject>python sqlmap.py --all -u "https://deploy-test-postgres.herokuapp.com/index.html" --level=3
        ___
       __H__
 ___ ___["]_____ ___ ___  {1.4.10.11#dev}
|_ -| . ["]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local,
 state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 03:46:52 /2020-10-24/

[03:46:52] [INFO] testing connection to the target URL
[03:46:53] [INFO] testing if the target URL content is stable
[03:46:53] [INFO] target URL content is stable
[03:46:53] [INFO] testing if parameter 'User-Agent' is dynamic
[03:46:53] [WARNING] parameter 'User-Agent' does not appear to be dynamic
[03:46:53] [WARNING] heuristic (basic) test shows that parameter 'User-Agent' might not be injectable
[03:46:54] [INFO] testing for SQL injection on parameter 'User-Agent'
[03:46:54] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[03:46:58] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[03:47:00] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[03:47:02] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[03:47:05] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[03:47:07] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[03:47:11] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[03:47:15] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[03:47:20] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[03:47:24] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[03:47:24] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace'
[03:47:25] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace'
[03:47:25] [INFO] testing 'Oracle boolean-based blind - Parameter replace'
[03:47:25] [INFO] testing 'Informix boolean-based blind - Parameter replace'
[03:47:25] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace'
[03:47:25] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[03:47:25] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[03:47:26] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[03:47:26] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[03:47:26] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[03:47:26] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[03:47:27] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[03:47:27] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[03:47:27] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause'
[03:47:28] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause'
[03:47:28] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[03:47:32] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries'
[03:47:35] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)'
[03:47:37] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[03:47:41] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[03:47:46] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[03:47:50] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[03:47:54] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[03:47:58] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[03:48:03] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[03:48:07] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[03:48:11] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[03:48:15] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[03:48:23] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[03:48:28] [INFO] testing 'Firebird AND error-based - WHERE or HAVING clause'
[03:48:34] [INFO] testing 'MonetDB AND error-based - WHERE or HAVING clause'
[03:48:38] [INFO] testing 'Vertica AND error-based - WHERE or HAVING clause'
[03:48:42] [INFO] testing 'IBM DB2 AND error-based - WHERE or HAVING clause'
[03:48:47] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[03:48:51] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[03:48:51] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[03:48:52] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[03:48:52] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace'
[03:48:52] [INFO] testing 'Oracle error-based - Parameter replace'
[03:48:52] [INFO] testing 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[03:48:53] [INFO] testing 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[03:48:53] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause'
[03:48:53] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Stacking (EXEC)'
[03:48:56] [INFO] testing 'Generic inline queries'
[03:48:56] [INFO] testing 'MySQL inline queries'
[03:48:56] [INFO] testing 'PostgreSQL inline queries'
[03:48:56] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[03:48:56] [INFO] testing 'Oracle inline queries'
[03:48:57] [INFO] testing 'SQLite inline queries'
[03:48:57] [INFO] testing 'Firebird inline queries'
[03:48:57] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[03:48:59] [INFO] parameter 'User-Agent' appears to be 'MySQL >= 5.0.12 stacked queries (comment)' injectable 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (3) and risk (1) values? [Y/n] y
[03:57:39] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[03:57:39] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[03:57:43] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[03:57:47] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[03:57:51] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[03:57:55] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[03:57:59] [INFO] checking if the injection point on User-Agent parameter 'User-Agent' is a false positive
[03:57:59] [WARNING] false positive or unexploitable injection point detected
[03:57:59] [WARNING] parameter 'User-Agent' does not seem to be injectable
[03:57:59] [INFO] testing if parameter 'Referer' is dynamic
[03:57:59] [WARNING] parameter 'Referer' does not appear to be dynamic
[03:57:59] [WARNING] heuristic (basic) test shows that parameter 'Referer' might not be injectable
[03:58:00] [INFO] testing for SQL injection on parameter 'Referer'
[03:58:00] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[03:58:04] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[03:58:04] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[03:58:04] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[03:58:04] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[03:58:05] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[03:58:05] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[03:58:05] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[03:58:05] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[03:58:09] [INFO] testing 'Generic inline queries'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n
] y
[04:04:55] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[04:05:05] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[04:05:13] [WARNING] parameter 'Referer' does not seem to be injectable
[04:05:13] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. I
f you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or
switch '--random-agent'

[*] ending @ 04:05:13 /2020-10-24/
