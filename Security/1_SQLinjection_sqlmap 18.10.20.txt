

(SQL-mapproject) C:\Stig\PyCharm\SQLmapproject>  python sqlmap.py --all -u "https://dat-250-test4.herokuapp.com/" --level=5


        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.10.11#dev}
|_ -| . ["]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local,
 state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 16:13:48 /2020-10-17/

[16:13:49] [INFO] testing connection to the target URL
[16:13:49] [INFO] testing if the target URL content is stable
[16:13:49] [INFO] target URL content is stable
[16:13:49] [INFO] testing if parameter 'User-Agent' is dynamic




[16:13:50] [WARNING] parameter 'User-Agent' does not appear to be dynamic
[16:13:50] [WARNING] heuristic (basic) test shows that parameter 'User-Agent' might not be injectable




[16:13:50] [INFO] testing for SQL injection on parameter 'User-Agent'
[16:13:50] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[16:14:02] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[16:14:09] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[16:14:11] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[16:14:15] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[16:14:20] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[16:14:28] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[16:14:36] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[16:14:48] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)'
[16:14:56] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[16:15:05] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[16:15:13] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[16:15:13] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET)'
[16:15:13] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)'
[16:15:14] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT)'
[16:15:14] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT - original value)'
[16:15:14] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int)'
[16:15:14] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int - original value)'
[16:15:15] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace'
[16:15:15] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (original value)'
[16:15:15] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)'
[16:15:16] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)'
[16:15:16] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace'
[16:15:16] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)'
[16:15:16] [INFO] testing 'Oracle boolean-based blind - Parameter replace'
[16:15:16] [INFO] testing 'Oracle boolean-based blind - Parameter replace (original value)'
[16:15:17] [INFO] testing 'Informix boolean-based blind - Parameter replace'
[16:15:17] [INFO] testing 'Informix boolean-based blind - Parameter replace (original value)'
[16:15:17] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace'
[16:15:17] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'
[16:15:17] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[16:15:18] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[16:15:18] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[16:15:18] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[16:15:18] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:19] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:15:19] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:19] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:15:19] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:20] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (original value)'
[16:15:20] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)'
[16:15:21] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause'
[16:15:21] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)'
[16:15:21] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:22] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:15:22] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:23] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:15:23] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause'
[16:15:24] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:15:24] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause'
[16:15:25] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause (original value)'
[16:15:25] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[16:15:33] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Stacked queries'
[16:15:38] [INFO] testing 'MySQL < 5.0 boolean-based blind - Stacked queries'
[16:15:38] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries'
[16:15:43] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)'
[16:15:49] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)'
[16:15:54] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries'
[16:15:59] [INFO] testing 'Oracle boolean-based blind - Stacked queries'
[16:16:04] [INFO] testing 'Microsoft Access boolean-based blind - Stacked queries'
[16:16:10] [INFO] testing 'SAP MaxDB boolean-based blind - Stacked queries'
[16:16:15] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[16:16:27] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[16:16:38] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[16:16:53] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[16:17:03] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:17:14] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[16:17:25] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[16:17:35] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:17:46] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[16:17:59] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[16:18:11] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[16:18:23] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[16:18:33] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[16:18:43] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[16:18:53] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[16:19:07] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)'
[16:19:17] [INFO] testing 'Firebird AND error-based - WHERE or HAVING clause'
[16:19:24] [INFO] testing 'MonetDB AND error-based - WHERE or HAVING clause'
[16:19:32] [INFO] testing 'Vertica AND error-based - WHERE or HAVING clause'
[16:19:40] [INFO] testing 'IBM DB2 AND error-based - WHERE or HAVING clause'
[16:19:47] [INFO] testing 'IBM DB2 OR error-based - WHERE or HAVING clause'
[16:19:55] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[16:20:03] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[16:20:03] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[16:20:03] [INFO] testing 'MySQL >= 5.6 error-based - Parameter replace (GTID_SUBSET)'
[16:20:04] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[16:20:04] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[16:20:04] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[16:20:04] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[16:20:04] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[16:20:05] [INFO] testing 'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)'
[16:20:05] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace'
[16:20:05] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)'
[16:20:05] [INFO] testing 'Oracle error-based - Parameter replace'
[16:20:05] [INFO] testing 'Firebird error-based - Parameter replace'
[16:20:06] [INFO] testing 'IBM DB2 error-based - Parameter replace'
[16:20:06] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)'
[16:20:06] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)'
[16:20:07] [INFO] testing 'MySQL >= 5.6 error-based - ORDER BY, GROUP BY clause (GTID_SUBSET)'
[16:20:07] [INFO] testing 'MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS)'
[16:20:08] [INFO] testing 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[16:20:08] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)'
[16:20:09] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)'
[16:20:09] [INFO] testing 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[16:20:09] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause'
[16:20:10] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)'
[16:20:10] [INFO] testing 'Microsoft SQL Server/Sybase error-based - ORDER BY clause'
[16:20:11] [INFO] testing 'Oracle error-based - ORDER BY, GROUP BY clause'
[16:20:11] [INFO] testing 'Firebird error-based - ORDER BY clause'
[16:20:11] [INFO] testing 'IBM DB2 error-based - ORDER BY clause'
[16:20:12] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Stacking (EXEC)'
[16:20:17] [INFO] testing 'Generic inline queries'
[16:20:17] [INFO] testing 'MySQL inline queries'
[16:20:17] [INFO] testing 'PostgreSQL inline queries'
[16:20:18] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[16:20:18] [INFO] testing 'Oracle inline queries'
[16:20:18] [INFO] testing 'SQLite inline queries'
[16:20:18] [INFO] testing 'Firebird inline queries'
[16:20:18] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[16:20:27] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[16:20:36] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[16:20:41] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[16:20:48] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[16:20:57] [INFO] testing 'PostgreSQL > 8.1 stacked queries'
[16:21:07] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc - comment)'
[16:21:12] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc)'
[16:21:20] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[16:21:25] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE - comment)'
[16:21:31] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'
[16:21:40] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE)'
[16:21:48] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[16:21:53] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)'
[16:22:02] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP - comment)'
[16:22:06] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP)'
[16:22:14] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP - comment)'
[16:22:14] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP)'
[16:22:14] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[16:22:26] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[16:22:40] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP - comment)'
[16:22:47] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment)'
[16:22:55] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind'
[16:23:05] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (comment)'
[16:23:15] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP)'
[16:23:26] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment)'
[16:23:32] [INFO] testing 'MySQL AND time-based blind (ELT)'
[16:23:43] [INFO] testing 'MySQL AND time-based blind (ELT - comment)'
[16:23:50] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[16:24:04] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind (comment)'
[16:24:12] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[16:24:24] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF - comment)'
[16:24:32] [INFO] testing 'Oracle AND time-based blind'
[16:24:43] [INFO] testing 'Oracle AND time-based blind (comment)'
[16:24:51] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace'
[16:24:51] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)'
[16:24:51] [INFO] testing 'MySQL time-based blind - Parameter replace (bool)'
[16:24:51] [INFO] testing 'MySQL time-based blind - Parameter replace (ELT)'
[16:24:52] [INFO] testing 'MySQL time-based blind - Parameter replace (MAKE_SET)'
[16:24:52] [INFO] testing 'PostgreSQL > 8.1 time-based blind - Parameter replace'
[16:24:52] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)'
[16:24:52] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)'
[16:24:52] [INFO] testing 'MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause'
[16:24:53] [INFO] testing 'PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause'
[16:24:53] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP)'
[16:24:54] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE)'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n
] n
[16:27:29] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[16:29:09] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[16:30:50] [INFO] testing 'Generic UNION query (NULL) - 11 to 20 columns'
[16:32:14] [INFO] testing 'Generic UNION query (random number) - 11 to 20 columns'
[16:33:34] [INFO] testing 'Generic UNION query (NULL) - 21 to 30 columns'
[16:34:56] [INFO] testing 'Generic UNION query (random number) - 21 to 30 columns'
[16:36:24] [INFO] testing 'Generic UNION query (NULL) - 31 to 40 columns'
[16:37:45] [INFO] testing 'Generic UNION query (random number) - 31 to 40 columns'
[16:39:12] [INFO] testing 'Generic UNION query (NULL) - 41 to 50 columns'
[16:40:41] [INFO] testing 'Generic UNION query (random number) - 41 to 50 columns'
[16:42:04] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'
[16:43:34] [INFO] testing 'MySQL UNION query (random number) - 1 to 10 columns'
[16:45:12] [INFO] testing 'MySQL UNION query (NULL) - 11 to 20 columns'
[16:46:34] [INFO] testing 'MySQL UNION query (random number) - 11 to 20 columns'
[16:47:56] [INFO] testing 'MySQL UNION query (NULL) - 21 to 30 columns'
[16:49:13] [INFO] testing 'MySQL UNION query (random number) - 21 to 30 columns'
ther (potential) technique found. Do you want to reduce the number of requests? [Y
/n] n
[16:27:29] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[16:29:09] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[16:30:50] [INFO] testing 'Generic UNION query (NULL) - 11 to 20 columns'
[16:32:14] [INFO] testing 'Generic UNION query (random number) - 11 to 20 columns'

[16:33:34] [INFO] testing 'Generic UNION query (NULL) - 21 to 30 columns'
[16:34:56] [INFO] testing 'Generic UNION query (random number) - 21 to 30 columns'
[16:36:24] [INFO] testing 'Generic UNION query (NULL) - 31 to 40 columns'
[16:37:45] [INFO] testing 'Generic UNION query (random number) - 31 to 40 columns'
[16:39:12] [INFO] testing 'Generic UNION query (NULL) - 41 to 50 columns'
[16:40:41] [INFO] testing 'Generic UNION query (random number) - 41 to 50 columns'
[16:42:04] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'
[16:43:34] [INFO] testing 'MySQL UNION query (random number) - 1 to 10 columns'
[16:45:12] [INFO] testing 'MySQL UNION query (NULL) - 11 to 20 columns'
[16:46:34] [INFO] testing 'MySQL UNION query (random number) - 11 to 20 columns'
[16:47:56] [INFO] testing 'MySQL UNION query (NULL) - 21 to 30 columns'
[16:49:13] [INFO] testing 'MySQL UNION query (random number) - 21 to 30 columns'
[16:50:39] [INFO] testing 'MySQL UNION query (NULL) - 31 to 40 columns'
[16:52:00] [INFO] testing 'MySQL UNION query (random number) - 31 to 40 columns'
[16:53:23] [INFO] testing 'MySQL UNION query (NULL) - 41 to 50 columns'
[16:54:49] [INFO] testing 'MySQL UNION query (random number) - 41 to 50 columns'





[16:56:18] [WARNING] parameter 'User-Agent' does not seem to be injectable
[16:56:18] [INFO] testing if parameter 'Referer' is dynamic
[16:56:18] [WARNING] parameter 'Referer' does not appear to be dynamic
[16:56:18] [WARNING] heuristic (basic) test shows that parameter 'Referer' might not be injectable




[16:56:18] [INFO] testing for SQL injection on parameter 'Referer'
[16:56:18] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[16:56:30] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[16:56:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[16:56:40] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[16:56:44] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[16:56:49] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[16:56:58] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[16:57:06] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[16:57:15] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)'
[16:57:24] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[16:57:33] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[16:57:41] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[16:57:41] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET)'
[16:57:42] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)'
[16:57:42] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT)'
[16:57:42] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT - original value)'
[16:57:42] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int)'
[16:57:42] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int - original value)'
[16:57:43] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace'
[16:57:43] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (original value)'
[16:57:43] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)'
[16:57:43] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)'
[16:57:43] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace'
[16:57:44] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)'
[16:57:44] [INFO] testing 'Oracle boolean-based blind - Parameter replace'
[16:57:44] [INFO] testing 'Oracle boolean-based blind - Parameter replace (original value)'
[16:57:44] [INFO] testing 'Informix boolean-based blind - Parameter replace'
[16:57:44] [INFO] testing 'Informix boolean-based blind - Parameter replace (original value)'
[16:57:45] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace'
[16:57:45] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'
[16:57:45] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[16:57:45] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[16:57:45] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[16:57:46] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[16:57:46] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:47] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:57:47] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:47] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:57:47] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:47] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (original value)'
[16:57:48] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)'
[16:57:48] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause'
[16:57:49] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)'
[16:57:49] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:49] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:57:50] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:51] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:57:51] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause'
[16:57:52] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[16:57:52] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause'
[16:57:53] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause (original value)'
[16:57:53] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[16:58:01] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Stacked queries'
[16:58:07] [INFO] testing 'MySQL < 5.0 boolean-based blind - Stacked queries'
[16:58:07] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries'
[16:58:15] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)'
[16:58:20] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)'
[16:58:26] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries'
[16:58:32] [INFO] testing 'Oracle boolean-based blind - Stacked queries'
[16:58:40] [INFO] testing 'Microsoft Access boolean-based blind - Stacked queries'
[16:58:45] [INFO] testing 'SAP MaxDB boolean-based blind - Stacked queries'
[16:58:51] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[16:59:03] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[16:59:14] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[16:59:26] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[16:59:39] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:59:50] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[17:00:02] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[17:00:14] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[17:00:28] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[17:00:43] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[17:00:55] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[17:01:09] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[17:01:22] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[17:01:33] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[17:01:45] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[17:01:56] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)'
[17:02:12] [INFO] testing 'Firebird AND error-based - WHERE or HAVING clause'
[17:02:20] [INFO] testing 'MonetDB AND error-based - WHERE or HAVING clause'
[17:02:32] [INFO] testing 'Vertica AND error-based - WHERE or HAVING clause'
[17:02:48] [INFO] testing 'IBM DB2 AND error-based - WHERE or HAVING clause'
[17:02:56] [INFO] testing 'IBM DB2 OR error-based - WHERE or HAVING clause'
[17:03:04] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[17:03:12] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[17:03:12] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[17:03:13] [INFO] testing 'MySQL >= 5.6 error-based - Parameter replace (GTID_SUBSET)'
[17:03:13] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[17:03:13] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[17:03:13] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[17:03:13] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[17:03:14] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[17:03:14] [INFO] testing 'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)'
[17:03:14] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace'
[17:03:14] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)'
[17:03:14] [INFO] testing 'Oracle error-based - Parameter replace'
[17:03:14] [INFO] testing 'Firebird error-based - Parameter replace'
[17:03:15] [INFO] testing 'IBM DB2 error-based - Parameter replace'
[17:03:15] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)'
[17:03:15] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)'
[17:03:16] [INFO] testing 'MySQL >= 5.6 error-based - ORDER BY, GROUP BY clause (GTID_SUBSET)'
[17:03:16] [INFO] testing 'MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS)'
[17:03:16] [INFO] testing 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[17:03:17] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)'
[17:03:17] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)'
[17:03:18] [INFO] testing 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[17:03:18] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause'
[17:03:19] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)'
[17:03:19] [INFO] testing 'Microsoft SQL Server/Sybase error-based - ORDER BY clause'
[17:03:20] [INFO] testing 'Oracle error-based - ORDER BY, GROUP BY clause'
[17:03:20] [INFO] testing 'Firebird error-based - ORDER BY clause'
[17:03:20] [INFO] testing 'IBM DB2 error-based - ORDER BY clause'
[17:03:21] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Stacking (EXEC)'
[17:03:26] [INFO] testing 'Generic inline queries'
[17:03:27] [INFO] testing 'MySQL inline queries'
[17:03:27] [INFO] testing 'PostgreSQL inline queries'
[17:03:27] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[17:03:27] [INFO] testing 'Oracle inline queries'
[17:03:27] [INFO] testing 'SQLite inline queries'
[17:03:28] [INFO] testing 'Firebird inline queries'
[17:03:28] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[17:03:33] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[17:03:43] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[17:03:47] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[17:03:56] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[17:04:01] [INFO] testing 'PostgreSQL > 8.1 stacked queries'
[17:04:09] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc - comment)'
[17:04:14] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc)'
[17:04:25] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[17:04:30] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE - comment)'
[17:04:36] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'
[17:04:44] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE)'
[17:04:52] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[17:05:07] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)'
[17:05:15] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP - comment)'
[17:05:20] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP)'
[17:05:28] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP - comment)'
[17:05:28] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP)'
[17:05:28] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[17:05:43] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[17:05:53] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP - comment)'
[17:06:00] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment)'
[17:06:08] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind'
[17:06:20] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (comment)'
[17:06:29] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP)'
[17:06:41] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment)'
[17:06:48] [INFO] testing 'MySQL AND time-based blind (ELT)'
[17:07:09] [INFO] testing 'MySQL AND time-based blind (ELT - comment)'
[17:07:26] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[17:07:37] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind (comment)'
[17:07:58] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[17:08:16] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF - comment)'
[17:08:28] [INFO] testing 'Oracle AND time-based blind'
[17:08:41] [INFO] testing 'Oracle AND time-based blind (comment)'
[17:08:49] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace'
[17:08:50] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)'
[17:08:50] [INFO] testing 'MySQL time-based blind - Parameter replace (bool)'
[17:08:50] [INFO] testing 'MySQL time-based blind - Parameter replace (ELT)'
[17:08:50] [INFO] testing 'MySQL time-based blind - Parameter replace (MAKE_SET)'
[17:08:50] [INFO] testing 'PostgreSQL > 8.1 time-based blind - Parameter replace'
[17:08:51] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)'
[17:08:51] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)'
[17:08:51] [INFO] testing 'MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause'
[17:08:51] [INFO] testing 'PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause'
[17:08:52] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP)'
[17:08:52] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE)'
[17:08:52] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[17:11:05] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[17:13:06] [INFO] testing 'Generic UNION query (NULL) - 11 to 20 columns'
[17:14:37] [INFO] testing 'Generic UNION query (random number) - 11 to 20 columns'
[17:15:55] [INFO] testing 'Generic UNION query (NULL) - 21 to 30 columns'
[17:17:16] [INFO] testing 'Generic UNION query (random number) - 21 to 30 columns'
[17:18:32] [INFO] testing 'Generic UNION query (NULL) - 31 to 40 columns'
[17:19:47] [INFO] testing 'Generic UNION query (random number) - 31 to 40 columns'
[17:21:09] [INFO] testing 'Generic UNION query (NULL) - 41 to 50 columns'
[17:22:24] [INFO] testing 'Generic UNION query (random number) - 41 to 50 columns'
[17:23:52] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'
[17:25:28] [INFO] testing 'MySQL UNION query (random number) - 1 to 10 columns'
[17:27:06] [INFO] testing 'MySQL UNION query (NULL) - 11 to 20 columns'
[17:28:21] [INFO] testing 'MySQL UNION query (random number) - 11 to 20 columns'
[17:29:36] [INFO] testing 'MySQL UNION query (NULL) - 21 to 30 columns'
[17:30:54] [INFO] testing 'MySQL UNION query (random number) - 21 to 30 columns'
[17:32:09] [INFO] testing 'MySQL UNION query (NULL) - 31 to 40 columns'
[17:33:25] [INFO] testing 'MySQL UNION query (random number) - 31 to 40 columns'
[17:34:44] [INFO] testing 'MySQL UNION query (NULL) - 41 to 50 columns'
[17:35:59] [INFO] testing 'MySQL UNION query (random number) - 41 to 50 columns'




[17:37:13] [WARNING] parameter 'Referer' does not seem to be injectable
[17:37:13] [INFO] testing if parameter 'Host' is dynamic
[17:37:13] [WARNING] parameter 'Host' does not appear to be dynamic
[17:37:14] [WARNING] heuristic (basic) test shows that parameter 'Host' might not be injectable




[17:37:14] [INFO] testing for SQL injection on parameter 'Host'
[17:37:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[17:37:34] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[17:37:48] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[17:37:52] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[17:38:00] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[17:38:08] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[17:38:25] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[17:38:39] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[17:38:54] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int)'
[17:39:09] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[17:39:23] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[17:39:37] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[17:39:37] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET)'
[17:39:38] [INFO] testing 'MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)'
[17:39:38] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT)'
[17:39:38] [INFO] testing 'MySQL boolean-based blind - Parameter replace (ELT - original value)'
[17:39:39] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int)'
[17:39:39] [INFO] testing 'MySQL boolean-based blind - Parameter replace (bool*int - original value)'
[17:39:39] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace'
[17:39:40] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (original value)'
[17:39:40] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)'
[17:39:40] [INFO] testing 'PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)'
[17:39:41] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace'
[17:39:41] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)'
[17:39:41] [INFO] testing 'Oracle boolean-based blind - Parameter replace'
[17:39:42] [INFO] testing 'Oracle boolean-based blind - Parameter replace (original value)'
[17:39:42] [INFO] testing 'Informix boolean-based blind - Parameter replace'
[17:39:43] [INFO] testing 'Informix boolean-based blind - Parameter replace (original value)'
[17:39:43] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace'
[17:39:43] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'
[17:39:44] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[17:39:44] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL - original value)'
[17:39:44] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[17:39:45] [INFO] testing 'Boolean-based blind - Parameter replace (CASE - original value)'
[17:39:45] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:46] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[17:39:47] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:47] [INFO] testing 'MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[17:39:47] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:47] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (original value)'
[17:39:48] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)'
[17:39:49] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause'
[17:39:49] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)'
[17:39:50] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:51] [INFO] testing 'Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[17:39:52] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:53] [INFO] testing 'Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[17:39:53] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause'
[17:39:54] [INFO] testing 'SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)'
[17:39:55] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause'
[17:39:56] [INFO] testing 'IBM DB2 boolean-based blind - ORDER BY clause (original value)'
[17:39:57] [INFO] testing 'HAVING boolean-based blind - WHERE, GROUP BY clause'
[17:40:14] [INFO] testing 'MySQL >= 5.0 boolean-based blind - Stacked queries'
[17:40:23] [INFO] testing 'MySQL < 5.0 boolean-based blind - Stacked queries'
[17:40:23] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries'
[17:40:33] [INFO] testing 'PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)'
[17:40:42] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)'
[17:40:55] [INFO] testing 'Microsoft SQL Server/Sybase boolean-based blind - Stacked queries'
[17:41:04] [INFO] testing 'Oracle boolean-based blind - Stacked queries'
[17:41:13] [INFO] testing 'Microsoft Access boolean-based blind - Stacked queries'
[17:41:23] [INFO] testing 'SAP MaxDB boolean-based blind - Stacked queries'
[18:38:04] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[18:38:13] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[18:38:23] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[18:38:37] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[22:13:57] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:14:07] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[22:14:18] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[22:14:29] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:14:40] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[22:14:52] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[22:15:03] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[22:15:14] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[22:15:24] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[22:15:34] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[22:15:44] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:15:54] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH)'
[22:16:05] [INFO] testing 'Firebird AND error-based - WHERE or HAVING clause'
[22:16:12] [INFO] testing 'MonetDB AND error-based - WHERE or HAVING clause'
[22:16:19] [INFO] testing 'Vertica AND error-based - WHERE or HAVING clause'
[22:16:29] [INFO] testing 'IBM DB2 AND error-based - WHERE or HAVING clause'
[22:16:36] [INFO] testing 'IBM DB2 OR error-based - WHERE or HAVING clause'
[22:16:46] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[22:16:54] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[22:16:54] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[22:16:54] [INFO] testing 'MySQL >= 5.6 error-based - Parameter replace (GTID_SUBSET)'
[22:16:54] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[22:16:54] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[22:16:55] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[22:16:55] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[22:16:55] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[22:16:55] [INFO] testing 'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)'
[22:16:56] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace'
[22:16:56] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)'
[22:16:56] [INFO] testing 'Oracle error-based - Parameter replace'
[22:16:57] [INFO] testing 'Firebird error-based - Parameter replace'
[22:16:57] [INFO] testing 'IBM DB2 error-based - Parameter replace'
[22:16:57] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED)'
[22:16:57] [INFO] testing 'MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP)'
[22:16:58] [INFO] testing 'MySQL >= 5.6 error-based - ORDER BY, GROUP BY clause (GTID_SUBSET)'
[22:16:58] [INFO] testing 'MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS)'
[22:16:58] [INFO] testing 'MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[22:16:59] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE)'
[22:16:59] [INFO] testing 'MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML)'
[22:17:00] [INFO] testing 'MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR)'
[22:17:00] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause'
[22:17:00] [INFO] testing 'PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES)'
[22:17:01] [INFO] testing 'Microsoft SQL Server/Sybase error-based - ORDER BY clause'
[22:17:01] [INFO] testing 'Oracle error-based - ORDER BY, GROUP BY clause'
[22:17:01] [INFO] testing 'Firebird error-based - ORDER BY clause'
[22:17:02] [INFO] testing 'IBM DB2 error-based - ORDER BY clause'
[22:17:02] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Stacking (EXEC)'
[22:17:08] [INFO] testing 'Generic inline queries'
[22:17:09] [INFO] testing 'MySQL inline queries'
[22:17:09] [INFO] testing 'PostgreSQL inline queries'
[22:17:09] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[22:17:09] [INFO] testing 'Oracle inline queries'
[22:17:09] [INFO] testing 'SQLite inline queries'
[22:17:10] [INFO] testing 'Firebird inline queries'
[22:17:10] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[22:17:15] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[22:17:24] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[22:17:29] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[22:17:37] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[22:17:42] [INFO] testing 'PostgreSQL > 8.1 stacked queries'
[22:17:50] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc - comment)'
[22:17:56] [INFO] testing 'PostgreSQL < 8.2 stacked queries (Glibc)'
[22:18:03] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[22:18:08] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE - comment)'
[22:18:13] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'
[22:18:21] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE)'
[22:18:28] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[22:18:34] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)'
[22:18:43] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP - comment)'
[22:18:49] [INFO] testing 'Oracle stacked queries (DBMS_LOCK.SLEEP)'
[22:18:57] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP - comment)'
[22:18:57] [INFO] testing 'Oracle stacked queries (USER_LOCK.SLEEP)'
[22:18:57] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[22:19:07] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[22:19:17] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP - comment)'
[22:19:25] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment)'
[22:19:33] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind'
[22:19:44] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (comment)'
[22:19:51] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP)'
[22:20:02] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment)'
[22:20:08] [INFO] testing 'MySQL AND time-based blind (ELT)'
[22:20:18] [INFO] testing 'MySQL AND time-based blind (ELT - comment)'
[22:20:25] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[22:20:36] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind (comment)'
[22:20:43] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[22:20:53] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF - comment)'
[22:21:03] [INFO] testing 'Oracle AND time-based blind'
[22:21:12] [INFO] testing 'Oracle AND time-based blind (comment)'
[22:21:20] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace'
[22:21:20] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)'
[22:21:20] [INFO] testing 'MySQL time-based blind - Parameter replace (bool)'
[22:21:21] [INFO] testing 'MySQL time-based blind - Parameter replace (ELT)'
[22:21:21] [INFO] testing 'MySQL time-based blind - Parameter replace (MAKE_SET)'
[22:21:21] [INFO] testing 'PostgreSQL > 8.1 time-based blind - Parameter replace'
[22:21:21] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)'
[22:21:22] [INFO] testing 'Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)'
[22:21:22] [INFO] testing 'MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause'
[22:21:22] [INFO] testing 'PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause'
[22:21:23] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP)'
[22:21:23] [INFO] testing 'Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE)'
[22:21:24] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:22:51] [INFO] testing 'Generic UNION query (random number) - 1 to 10 columns'
[22:24:13] [INFO] testing 'Generic UNION query (NULL) - 11 to 20 columns'
[22:25:25] [INFO] testing 'Generic UNION query (random number) - 11 to 20 columns'
[22:26:39] [INFO] testing 'Generic UNION query (NULL) - 21 to 30 columns'
[22:27:55] [INFO] testing 'Generic UNION query (random number) - 21 to 30 columns'
[22:29:07] [INFO] testing 'Generic UNION query (NULL) - 31 to 40 columns'
[22:40:20] [INFO] testing 'Generic UNION query (random number) - 31 to 40 columns'
[22:41:34] [INFO] testing 'Generic UNION query (NULL) - 41 to 50 columns'
[22:42:52] [INFO] testing 'Generic UNION query (random number) - 41 to 50 columns'
[22:44:04] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'
[22:45:25] [INFO] testing 'MySQL UNION query (random number) - 1 to 10 columns'
[22:46:47] [INFO] testing 'MySQL UNION query (NULL) - 11 to 20 columns'
[22:48:02] [INFO] testing 'MySQL UNION query (random number) - 11 to 20 columns'
[22:49:13] [INFO] testing 'MySQL UNION query (NULL) - 21 to 30 columns'
[22:50:32] [INFO] testing 'MySQL UNION query (random number) - 21 to 30 columns'
[22:51:47] [INFO] testing 'MySQL UNION query (NULL) - 31 to 40 columns'
[22:53:04] [INFO] testing 'MySQL UNION query (random number) - 31 to 40 columns'
[22:54:18] [INFO] testing 'MySQL UNION query (NULL) - 41 to 50 columns'
[22:55:35] [INFO] testing 'MySQL UNION query (random number) - 41 to 50 columns'




[22:56:50] [WARNING] parameter 'Host' does not seem to be injectable
[22:56:50] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. I
f you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or
switch '--random-agent'

[22:56:50] [WARNING] HTTP error codes detected during run:
404 (Not Found) - 10987 times, 400 (Bad Request) - 259 times

[*] ending @ 22:56:50 /2020-10-17/



Konklusjon: Ingen funn for SQL injection
